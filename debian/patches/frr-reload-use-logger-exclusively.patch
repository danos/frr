From: Duncan Eastoe <duncan.eastoe@att.com>
Date: Wed, 15 Jul 2020 12:35:42 +0100
Subject: tools: frr-reload: log exclusively through logger

In several instances a call to log.error() is preceded by a print()
for the same message. To prevent duplicate messages these print()
calls are removed.

To maintain (very) similar behaviour we add a StreamHandler to the
logger, when doing logging to a file (ie. --reload without --stdout),
which additionally sends error and above logs to STDOUT without any
metadata (exactly as they did before, with print()).

There is one subtle change - the "VTY locked" log from
vtysh_config_available() is now preceded with the
"'<vtysh>' returned" text, whereas previously only the output
from vtysh was sent to STDOUT.

Furthermore any error logs which weren't previously explicitly logged
to STDOUT will now be.

Signed-off-by: Duncan Eastoe <duncan.eastoe@att.com>
---
 tools/frr-reload.py | 41 ++++++++++++++++++-----------------------
 1 file changed, 18 insertions(+), 23 deletions(-)

diff --git a/tools/frr-reload.py b/tools/frr-reload.py
index bc9baa1..e481cb6 100755
--- a/tools/frr-reload.py
+++ b/tools/frr-reload.py
@@ -62,7 +62,6 @@ log = logging.getLogger(__name__)
 class VtyshMarkException(Exception):
     pass
 
-
 class Context(object):
 
     """
@@ -1108,14 +1107,11 @@ def vtysh_config_available(bindir, confdir):
         output = subprocess.check_output(cmd).strip()
 
         if 'VTY configuration is locked by other VTY' in output.decode('utf-8'):
-            print(output)
             log.error("'%s' returned\n%s\n" % (' '.join(cmd), output))
             return False
 
     except subprocess.CalledProcessError as e:
-        msg = "vtysh could not connect with any frr daemons"
-        print(msg)
-        log.error(msg)
+        log.error("vtysh could not connect with any frr daemons")
         return False
 
     return True
@@ -1170,38 +1166,39 @@ if __name__ == '__main__':
     else:
         log.setLevel(args.log_level.upper())
 
+    if args.reload and not args.stdout:
+        # Additionally send errors and above to STDOUT, with no metadata,
+        # when we are logging to a file. This specifically does not follow
+        # args.log_level, and is analagous to behaviour in earlier versions
+        # which additionally logged most errors using print().
+
+        stdout_hdlr = logging.StreamHandler(sys.stdout)
+        stdout_hdlr.setLevel(logging.ERROR)
+        stdout_hdlr.setFormatter(logging.Formatter())
+        log.addHandler(stdout_hdlr)
+
     # Verify the new config file is valid
     if not os.path.isfile(args.filename):
-        msg = "Filename %s does not exist" % args.filename
-        print(msg)
-        log.error(msg)
+        log.error("Filename %s does not exist" % args.filename)
         sys.exit(1)
 
     if not os.path.getsize(args.filename):
-        msg = "Filename %s is an empty file" % args.filename
-        print(msg)
-        log.error(msg)
+        log.error("Filename %s is an empty file" % args.filename)
         sys.exit(1)
 
     # Verify that confdir is correct
     if not os.path.isdir(args.confdir):
-        msg = "Confdir %s is not a valid path" % args.confdir
-        print(msg)
-        log.error(msg)
+        log.error("Confdir %s is not a valid path" % args.confdir)
         sys.exit(1)
 
     # Verify that bindir is correct
     if not os.path.isdir(args.bindir) or not os.path.isfile(args.bindir + '/vtysh'):
-        msg = "Bindir %s is not a valid path to vtysh" % args.bindir
-        print(msg)
-        log.error(msg)
+        log.error("Bindir %s is not a valid path to vtysh" % args.bindir)
         sys.exit(1)
 
     # verify that the daemon, if specified, is valid
     if args.daemon and args.daemon not in ['zebra', 'bgpd', 'fabricd', 'isisd', 'ospf6d', 'ospfd', 'pbrd', 'pimd', 'ripd', 'ripngd', 'sharpd', 'staticd', 'vrrpd', 'ldpd']:
-        msg = "Daemon %s is not a valid option for 'show running-config'" % args.daemon
-        print(msg)
-        log.error(msg)
+        log.error("Daemon %s is not a valid option for 'show running-config'" % args.daemon)
         sys.exit(1)
 
     # Verify that 'service integrated-vtysh-config' is configured
@@ -1218,9 +1215,7 @@ if __name__ == '__main__':
                     break
 
     if not service_integrated_vtysh_config and not args.daemon:
-        msg = "'service integrated-vtysh-config' is not configured, this is required for 'service frr reload'"
-        print(msg)
-        log.error(msg)
+        log.error("'service integrated-vtysh-config' is not configured, this is required for 'service frr reload'")
         sys.exit(1)
 
     log.info('Called via "%s"', str(args))
